<?php
require_once '../Entity.php';
require_once '../Element.php';
require_once '../Node.php';
require_once '../DiaNode.php';
require_once '../Link.php';
require_once '../DataFlow.php';
require_once '../Diagram.php';
require_once '../Process.php';
require_once '../DataStore.php';
require_once '../ExternalInteractor.php';
require_once '../Multiprocess.php';
require_once '../DataFlowDiagram.php';
require_once 'Models/BadConstructorCallException.php';
require_once 'Storage/DatabaseStorage.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-04 at 10:47:16.
 */
class LinkTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Link
     */
    protected $object;

    /**
     *
     * @var DatabaseStorage
     */
    protected $storage;
    /**
     *
     * @var DataFlowDiagram
     */
    protected $testDiagram;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if ($this->storage == null)
        {
            $this->storage = new DatabaseStorage();
        }
        
        $this->testDiagram = new DataFlowDiagram($this->storage);
        $this->object = new DataFlow($this->storage, $this->testDiagram->getId());
        $this->testDiagram->refresh();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //clear the DB
        $this->testDiagram->refresh();
        $this->testDiagram->delete();
    }

    /**
     * @covers Link::getOriginNode
     */
    public function testGetOriginNode_null()
    {
        $this->assertNull($this->object->getOriginNode());
    }

    /**
     * @covers Link::getOriginNode
     * @covers Link::setOriginNode
     */
    public function testGetOriginNodeSetOriginNode_smoke()
    {
        $aNode = new Process($this->storage, $this->testDiagram->getId());
        $this->object->setOriginNode($aNode);
        $this->assertEquals($aNode->getId(), $this->object->getOriginNode()['id']);
        $this->assertEquals($this->object->getId(), $aNode->getLinkbyId($this->object->getId())['id']);
    }

    /**
     * @covers Link::setOriginNode
     * @expectedException BadFunctionCallException
     */
    public function testSetOriginNode_null()
    {
        $this->object->setOriginNode(null);
    }

    /**
     * @covers Link::setOriginNode
     * @expectedException BadFunctionCallException
     */
    public function testSetOriginNode_invalidInput()
    {
        $aDF = new DataFlow($this->storage);
        $this->object->setOriginNode($aDF);
    }

    /**
     * @covers Link::clearOriginNode.
     */
    public function testClearOriginNode_null()
    {
        $this->assertNull($this->object->getOriginNode());
        $this->object->clearOriginNode();
        $this->assertNull($this->object->getOriginNode());
    }

    /**
     * @covers Link::clearOriginNode.
     */
    public function testClearOriginNode_smoke()
    {
        $this->assertNull($this->object->getOriginNode());
        $aNode = new Process($this->storage, $this->testDiagram->getId());
        $aNodeId = $aNode->getId();
        //$aNode->save();
        
        $this->object->setOriginNode($aNode);
        $this->assertEquals($this->object->getId(), $aNode->getLinkbyId($this->object->getId())['id']);
                
        $this->object->clearOriginNode();
        
        // Having done updates, need to refresh $aNode
        $aNode = new Process($this->storage, $aNodeId);
        
        $this->assertNull($this->object->getOriginNode());
        $this->assertNull($aNode->getLinkbyId($this->object->getId()));
    }

    /**
     * @covers Link::getDestinationNode
     */
    public function testGetDestinationNode_null()
    {
        $this->assertNull($this->object->getDestinationNode());
    }

    /**
     * @covers Link::getDestinationNode
     * @covers Link::setDestinationNode
     */
    public function testGetDestinationNodeSetDestinationNode_smoke()
    {
        $aNode = new Process($this->storage, $this->testDiagram->getId());
        $this->object->setDestinationNode($aNode);
        $this->assertEquals($aNode->getId(), $this->object->getDestinationNode()['id']);
        $this->assertEquals($this->object->getId(), $aNode->getLinkbyId($this->object->getId())['id']);
    }

    /**
     * @covers Link::setDestinationNode
     * @expectedException BadFunctionCallException
     */
    public function testSetDestinationNode_null()
    {
        $this->object->setDestinationNode(null);
    }

    /**
     * @covers Link::setDestinationNode
     * @expectedException BadFunctionCallException
     */
    public function testSetDestinationNode_invalidInput()
    {
        $aDF = new DataFlow($this->storage);
        $this->object->setDestinationNode($aDF);
    }

    /**
     * @covers Link::clearDestinationNode.
     */
    public function testClearDestinationNode_null()
    {
        $this->assertNull($this->object->getDestinationNode());
        $this->object->clearDestinationNode();
        $this->assertNull($this->object->getDestinationNode());
    }

    /**
     * @covers Link::clearDestinationNode.
     */
    public function testClearDestinationNode_smoke()
    {
        $this->assertNull($this->object->getDestinationNode());
        $aNode = new Process($this->storage, $this->testDiagram->getId());
        $aNodeId = $aNode->getId();
        //$aNode->save();
        
        $this->object->setDestinationNode($aNode);
        $this->assertEquals($this->object->getId(), $aNode->getLinkbyId($this->object->getId())['id']);
        
        $this->object->clearDestinationNode();
        
        // Need to refresh $aNode object
        $aNode = new Process($this->storage, $aNodeId);
        
        $this->assertNull($this->object->getDestinationNode());
        $this->assertNull($aNode->getLinkbyId($this->object->getId()));
    }

    /**
     * @covers Link::removeAllLinks
     */
    public function testRemoveAllLinks_null()
    {
        $this->object->removeAllNodes();
        $this->assertNull($this->object->getOriginNode());
        $this->assertNull($this->object->getDestinationNode());
    }

    /**
     * @covers Link::removeAllLinks
     */
    public function testRemoveAllLinks_smoke()
    {
        // Require that process is saved or else removeAll doesn't work - 
        // which is fair since only one element can be worked on at a time
        // under our paradigm, still it might be good to have checks if
        // an object is saved before attempting to delete it.
        $node1 = new Process($this->storage, $this->testDiagram->getId());
        $node1Id = $node1->getId();
        //$node1->save();
        
        $node2 = new Process($this->storage, $this->testDiagram->getId());
        $node2Id = $node2->getId();
        //$node2->save();
        
        $this->object->setOriginNode($node1);
        $this->object->setDestinationNode($node2);
                
        $this->object->removeAllNodes();
        
        // Need to refresh node objects
        $node1 = new Process($this->storage, $node2Id);
        $node2 = new Process($this->storage, $node2Id);
        
        $this->assertNull($this->object->getOriginNode());
        $this->assertNull($this->object->getDestinationNode());
        $this->assertNull($node1->getLinkbyId($this->object->getId()));
        $this->assertNull($node2->getLinkbyId($this->object->getId()));
    }

    /**
     * @covers Link::save
     * @covers Link::update
     * @covers Link::__construct loading version
     * @covers Link::getAssociativeArray
     */
    public function testSave_smoke()
    {
        $node = new Process($this->storage, $this->testDiagram->getId());
        $node->setLabel('someNode');
        $node->setLocation(20, 20);
        $node->setUser('Josh');
        //$node->save();
        
        $node2 = new Process($this->storage, $this->testDiagram->getId());
        $node2->setLabel('someNode2');
        $node2->setLocation(30, 20);
        $node2->setUser('The Eugene');
        //$node2->save();
        
        $this->object->setLabel('name');
        $this->object->setUser('Josh');
        $this->object->setLocation(50, 50);
        $this->object->setOriginNode($node);
        $this->object->setDestinationNode($node2);

        $this->object->update();//not calling save as it is already in the DB

        //load a fresh copy from the DB
        $loadedLink = new DataFlow($this->storage, $this->object->getId());
        //var_dump($this->object);
        //var_dump($loadedLink);
        $this->assertEquals($this->object->getAssociativeArray(), $loadedLink->getAssociativeArray());
        
    }

    /**
     * @covers Link::getAssociativeArray
     * @covers Link::loadAssociativeArray
     */
    public function testLoadAssociativeArray_empty()
    {
        $newLink = new DataFlow($this->storage, $this->testDiagram->getId());
        $newLink->loadAssociativeArray($this->object->getAssociativeArray());
        //Variables from Entity
        $this->assertEquals($this->object->getAssociativeArray()['label'], $newLink->getAssociativeArray()['label']);
        $this->assertEquals($this->object->getAssociativeArray()['userId'], $newLink->getAssociativeArray()['userId']);
        $this->assertEquals($this->object->getAssociativeArray()['organization'], $newLink->getAssociativeArray()['organization']);
        $this->assertFalse($this->object->getAssociativeArray()['id'] == $newLink->getAssociativeArray()['id']);
        
        //variables from Element
        $this->assertTrue($this->object->getAssociativeArray()['x'] == $newLink->getAssociativeArray()['x']);
        $this->assertTrue($this->object->getAssociativeArray()['y'] == $newLink->getAssociativeArray()['y']);
        $this->assertTrue($this->object->getAssociativeArray()['diagramId'] == $newLink->getAssociativeArray()['diagramId']);
        
        //variables from Link
        $this->assertTrue($this->object->getAssociativeArray()['originNode'] == $newLink->getAssociativeArray()['originNode']);
        $this->assertTrue($this->object->getAssociativeArray()['destinationNode'] == $newLink->getAssociativeArray()['destinationNode']);
    }
    
    /**
     * @covers Link::loadAssociativeArray
     */
    public function testLoadAssociativeArray_smoke()
    {
        $testLabel = "thingy";
        $testOrginator = "Josh";
        $testOrganization = "InD";
        
        $testX = 50;
        $testY = 150;
        $testParentID = $this->testDiagram->getId();
        
        $testOriginNode = new DataStore($this->storage, $this->testDiagram->getId());
        $testDestinationNode = new Process($this->storage, $this->testDiagram->getId());
        
        $assocArray['label'] = $testLabel;
        $assocArray['userId'] = $testOrginator;
        $assocArray['organization'] = $testOrganization;
        $assocArray['x'] = $testX;
        $assocArray['y'] = $testY;
        $assocArray['diagramId'] = $testParentID;
        $assocArray['originNode'] = $testOriginNode;
        $assocArray['destinationNode'] = $testDestinationNode;
        
        $this->object->loadAssociativeArray($assocArray);
        $this->assertTrue($this->object->getAssociativeArray()['label'] == $testLabel);
        $this->assertTrue($this->object->getAssociativeArray()['userId'] == $testOrginator);
        $this->assertTrue($this->object->getAssociativeArray()['organization'] == $testOrganization);
        $this->assertTrue($this->object->getAssociativeArray()['x'] == $testX);
        $this->assertTrue($this->object->getAssociativeArray()['y'] == $testY);
        $this->assertTrue($this->object->getAssociativeArray()['diagramId'] == $testParentID);
        $this->assertTrue($this->object->getAssociativeArray()['originNode'] == $testOriginNode);
        $this->assertTrue($this->object->getAssociativeArray()['destinationNode'] == $testDestinationNode);
    }
    
    public function testLoadAssociativeArray_missingParameter()
    {
        //create a base assoc. array
        $testLabel = "thingy";
        $testOrginator = "Josh";
        $testOrganization = "InD";
        
        $testX = 50;
        $testY = 150;
        $testParentID = $this->testDiagram->getId();
        
        $testOriginNode = new DataStore($this->storage, $this->testDiagram->getId());
        $testDestinationNode = new Process($this->storage, $this->testDiagram->getId());
        
        $assocArray['label'] = $testLabel;
        $assocArray['userId'] = $testOrginator;
        $assocArray['organization'] = $testOrganization;
        $assocArray['x'] = $testX;
        $assocArray['y'] = $testY;
        $assocArray['diagramId'] = $testParentID;
        
        //create an associative array that is missing destination node
        $assocArray1 = $assocArray;
        $assocArray1['originNode'] = $testOriginNode;
        //$assocArray1['destinationNode'] = $testDestinationNode;
       
        $this->object->loadAssociativeArray($assocArray1);
        
        $this->assertTrue($this->object->getAssociativeArray()['originNode'] == $testOriginNode);
        $this->assertFalse($this->object->getAssociativeArray()['destinationNode'] == $testDestinationNode);
        $this->assertTrue($this->object->getAssociativeArray()['destinationNode'] == null);
        
        //create an associative array that is missing origin node
        $assocArray2 = $assocArray;
        //$assocArray2['originNode'] = $testOriginNode;
        $assocArray2['destinationNode'] = $testDestinationNode;
        
        $this->object->loadAssociativeArray($assocArray2);
        
        $this->assertFalse($this->object->getAssociativeArray()['originNode'] == $testOriginNode);
        $this->assertTrue($this->object->getAssociativeArray()['destinationNode'] == $testDestinationNode);
        $this->assertTrue($this->object->getAssociativeArray()['originNode'] == null);
    }
}
