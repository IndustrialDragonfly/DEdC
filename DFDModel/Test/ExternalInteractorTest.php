<?php

require_once '../ExternalInteractor.php';
require_once '../DataFlowDiagram.php';
require_once '../DataFlow.php';
require_once 'testDB_functions.php';

require_once 'Storage/DatabaseStorage.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-04 at 11:27:08.
 */
class ExternalInteractorTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var ExternalInteractor
     */
    protected $object;

    /**
     * @var PDO
     */
    protected $pdo;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ExternalInteractor;

        if ($this->pdo == null)
        {
            $this->pdo = testDB_functions::getConnection();
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        testDB_functions::resetDB($this->pdo);
    }

    /**
     * @covers ExternalInteractor::__construct
     */
    public function testDidIBuild()
    {
        $this->assertTrue($this->object->getId() != NULL);
    }

    /**
     * @covers Process::save
     */
    public function testSave_smoke()
    {
        $storage = new DatabaseStorage();
        $this->object->setLabel('name');
        $this->object->setOriginator('Josh');
        $this->object->setLocation(50, 60);

        $df1 = new DataFlow;
        $df1->setDestinationNode($this->object);
        $df1->save($this->pdo);

        $df2 = new DataFlow;
        $df2->setOriginNode($this->object);
        $df2->save($this->pdo);

        $this->object->save($storage);

        $row = $this->pdo->query("SELECT * FROM entity WHERE id = '" . $this->object->getId() . "'")->fetch();
        $this->assertEquals($this->object->getId(), $row['id']);
        $this->assertEquals($this->object->getLabel(), $row['label']);
        $this->assertEquals($this->object->getOriginator(), $row['originator']);
        $this->assertEquals(Types::Process, $row['type']);

        $row = $this->pdo->query("SELECT * FROM element WHERE id = '" . $this->object->getId() . "'")->fetch();
        $this->assertEquals($this->object->getX(), $row['x']);
        $this->assertEquals($this->object->getY(), $row['y']);

        $rows = $this->pdo->query("SELECT * FROM node WHERE id = '" . $this->object->getId() . "'");
        for ($i = 0; $i < $this->object->getNumberOfLinks(); $i++)
        {
            $row = $rows->fetch();
            $this->assertEquals($this->object->getLinkbyPosition($i)->getId(), $row['df_id']);
        }
    }
    /**
     * @covers __contruct (loading)
     */
    public function testLoad_smoke()
    {
        // Items to store in DB and then compare too
        $id = 'a';
        $label = 'testlabel';
        $originator = 'The Eugene';
        $x = 2;
        $y = 6;
        // No links included for the time being as link loading not yet supported
        // in process only when loading DFD...
        // Manually insert values into the database
        //<editor-fold desc="save to Entity table" defaultstate="collapsed">
        // Prepare the statement
        $insert_stmt = $this->pdo->prepare("INSERT INTO entity (id, label, type, originator) VALUES(?,?,?,?)");

        // Bind the parameters of the prepared statement
        $type = Types::Process;
        $insert_stmt->bindParam(1, $id);
        $insert_stmt->bindParam(2, $label);
        $insert_stmt->bindParam(3, $type);
        $insert_stmt->bindParam(4, $originator);

        // Execute, catch any errors resulting
        $insert_stmt->execute();
        //</editor-fold>
        //<editor-fold desc="save to Element table" defaultstate="collapsed">
        // Prepare the statement
        $insert_stmt = $this->pdo->prepare("INSERT INTO element (id, x, y) VALUES(?,?,?)");

        // Bind the parameters of the prepared statement
        $insert_stmt->bindParam(1, $id);
        $insert_stmt->bindParam(2, $x);
        $insert_stmt->bindParam(3, $y);

        // Execute, catch any errors resulting
        $insert_stmt->execute();
        //</editor-fold>
        
        // Setup storage object for process object to use
        $storage = new DatabaseStorage();
        
        $dfd = new DataFlowDiagram();
        
        // Make comparisons
        $proc = new ExternalInteractor($storage, $id, $dfd);
        $this->assertEquals($id, $proc->getId());
        $this->assertEquals($label, $proc->getLabel());
        $this->assertEquals($originator, $proc->getOriginator());
        $this->assertEquals($x, $proc->getX());
        $this->assertEquals($y, $proc->getY());
    }
}
