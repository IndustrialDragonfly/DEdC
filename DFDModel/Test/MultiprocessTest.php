<?php

require_once '../Multiprocess.php';
require_once '../Node.php';
require_once '../Process.php';
require_once '../DataFlow.php';
require_once '../DiaNode.php';
require_once 'testDB_functions.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-04 at 13:04:04.
 */
class MultiprocessTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Multiprocess
     */
    protected $object;

    /**
     * @var PDO
     */
    protected $pdo;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Multiprocess;

        if ($this->pdo == null)
        {
            $this->pdo = testDB_functions::getConnection();
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        testDB_functions::resetDB($this->pdo);
    }

    /**
     * @covers Multiprocess::getSubDFD
     */
    public function testGetSubDFD_null()
    {
        $this->assertTrue($this->object->getSubDFD() != NULL);
    }

    /**
     * @covers Multiprocess::setSubDFD
     * @covers Multiprocess::getSubDFD
     */
    public function testSetSubDFDGetSubDFD_smoke()
    {
        $dfd = new DataFlowDiagram;
        $oldDFD = $this->object->getSubDFD();
        $this->object->setSubDFD($dfd);
        $this->assertTrue($this->object->getSubDFD() != $oldDFD);
    }

    /**
     * @covers Multiprocess::setSubDFD
     * @covers Multiprocess::getSubDFD
     * @expectedException BadFunctionCallException
     */
    public function testSetSubDFDGetSubDFD_invalidInput()
    {
        $element = new Process;
        $this->object->setSubDFD($element);
    }

    /**
     * @covers Node::addLink
     */
    public function testAddLink_smoke()
    {
        $aDF = new DataFlow;
        $this->object->addLink($aDF);
        $this->assertEquals(1, $this->object->getNumberOfLinks());
        $this->assertEquals(1, $this->object->getSubDFD()->getNumberOfExternalLinks());
        $annotherDF = $this->object->getLinkbyPosition(0);
        $this->assertEquals($aDF, $annotherDF);

        $this->assertEquals(
                $this->object->getSubDFD()->getExternalLinkById($aDF->getId()), $aDF);
    }

    /**
     * @covers Node::addLink
     * @expectedException BadFunctionCallException
     */
    public function testAddLink_invalidInput()
    {
        $aNode = new Process;
        $this->object->addLink($aNode);
    }

    /**
     * @covers Node::removeLink
     */
    public function testRemoveLink_smoke()
    {
        $aDF = new DataFlow;
        $aDF->setOriginNode($this->object);
        $this->assertEquals(1, $this->object->getNumberOfLinks());
        $this->assertEquals(1, $this->object->getSubDFD()->getNumberOfExternalLinks());
        $this->assertTrue($this->object->removeLink($aDF));
        $this->assertEquals(0, $this->object->getNumberOfLinks());
        $this->assertEquals(0, $this->object->getSubDFD()->getNumberOfExternalLinks());
        $this->assertNull($aDF->getOriginNode());
    }

    /**
     * @covers Node::removeLink
     */
    public function testRemoveLink_empty()
    {
        $aDF = new DataFlow;
        $this->assertFalse($this->object->removeLink($aDF));
    }

    public function testSave_smoke()
    {
        //create a multiprocess object with a couple of dataFlows connected to it
        $this->object->setLabel('name');
        $this->object->setOriginator('Josh');
        $this->object->setLocation(50, 60);

        $df1 = new DataFlow;
        $df1->setDestinationNode($this->object);
        $df1->save($this->pdo);

        $df2 = new DataFlow;
        $df2->setOriginNode($this->object);
        $df2->save($this->pdo);

        $this->object->getSubDFD()->save($this->pdo);
        $this->object->save($this->pdo);

        $row = $this->pdo->query("SELECT * FROM entity WHERE id = '" . $this->object->getId() . "'")->fetch();
        $this->assertEquals($this->object->getId(), $row['id']);
        $this->assertEquals($this->object->getLabel(), $row['label']);
        $this->assertEquals($this->object->getOriginator(), $row['originator']);
        $this->assertEquals(Types::Multiprocess, $row['type']);

        $row = $this->pdo->query("SELECT * FROM element WHERE id = '" . $this->object->getId() . "'")->fetch();
        $this->assertEquals($this->object->getX(), $row['x']);
        $this->assertEquals($this->object->getY(), $row['y']);

        $rows = $this->pdo->query("SELECT * FROM node WHERE id = '" . $this->object->getId() . "'");
        for ($i = 0; $i < $this->object->getNumberOfLinks(); $i++)
        {
            $row = $rows->fetch();
            $this->assertEquals($this->object->getLinkbyPosition($i)->getId(), $row['df_id']);
        }

        $row = $this->pdo->query("SELECT * FROM multiprocess WHERE mp_id = '" . $this->object->getId() . "'")->fetch();
        $this->assertEquals($this->object->getSubDFD()->getId(), $row['diagramId']);

        $rows = $this->pdo->query("SELECT * FROM external_links WHERE diagramId = '" . $this->object->getSubDFD()->getId() . "'");
        for ($i = 0; $i < $this->object->getSubDFD()->getNumberOfExternalLinks(); $i++)
        {
            $row = $rows->fetch();
            $this->assertEquals($this->object->getSubDFD()->getExternalLinkByPosition($i)->getId(), $row['df_id']);
        }
    }

}
