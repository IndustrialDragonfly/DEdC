<?php
require_once '../DataFlowDiagram.php';
require_once '../Entity.php';
require_once '../Element.php';
require_once '../DataFlow.php';
require_once '../Node.php';
require_once '../Process.php';
require_once '../DataStore.php';
require_once '../ExternalInteractor.php';
require_once '../Multiprocess.php';
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-04 at 11:37:41.
 */
class DataFlowDiagramTest extends PHPUnit_Framework_TestCase
{
   /**
    * @var DataFlowDiagram
    */
   protected $object;

   /**
    * Sets up the fixture, for example, opens a network connection.
    * This method is called before a test is executed.
    */
   protected function setUp()
   {
      $this->object = new DataFlowDiagram;
   }

   /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    */
   protected function tearDown()
   {
      
   }

   /**
    * @covers DataFlowDiagram::getNumberOfExternalLinks
    */
   public function testGetNumberOfExternalLinks_null()
   {
      $this->assertEquals(0, $this->object->getNumberOfExternalLinks());
   }
   
   /**
    * @covers DataFlowDiagram::getNumberOfExternalLinks
    */
   public function testGetNumberOfExternalLinks_smoke()
   {
      $aDF = new DataFlow;
      $this->object->addExternalLink($aDF);
      $this->assertEquals(1, $this->object->getNumberOfExternalLinks());
   }

   /**
    * @covers DataFlowDiagram::addExternalLink
    */
   public function testAddExternalLink_smoke()
   {
      $aDF = new DataFlow;
      $this->object->addExternalLink($aDF);
      $this->assertEquals(1, $this->object->getNumberOfExternalLinks());
      $annotherDF =  $this->object->getExternalLinkByPosition(0);
      $this->assertEquals($aDF, $annotherDF);
   }
   
   /**
    * @covers DataFlowDiagram::addExternalLink
    * @expectedException BadFunctionCallException
    */
   public function testAddExternalLink_invalidInput()
   {
      $aProcess = new Process;
      $this->object->addExternalLink($aProcess);
   }

   /**
    * @covers DataFlowDiagram::removeExternalLink
    */
   public function testRemoveExternalLink_smoke()
   {
      $aDF = new DataFlow;
      $this->object->addExternalLink($aDF);
      $this->assertEquals(1, $this->object->getNumberOfExternalLinks());
      $this->assertTrue($this->object->removeExternalLink($aDF));
      $this->assertEquals(0, $this->object->getNumberOfExternalLinks());
   }
   
   /**
    * @covers DataFlowDiagram::removeExternalLink
    */
   public function testRemoveExternalLink_empty()
   {
      $aDF = new DataFlow;
      $this->assertFalse($this->object->removeExternalLink($aDF));
   }

   /**
    * @covers DataFlowDiagram::getExternalLinkByPosition
    */
   public function testGetExternalLinkByPosition_smoke()
   {
      $aDF = new DataFlow;
      $this->object->addExternalLink($aDF);
      $this->assertEquals($aDF, $this->object->getExternalLinkByPosition(0));
   }
   
   /**
    * @covers DataFlowDiagram::getExternalLinkByPosition
    * @expectedException BadFunctionCallException
    */
   public function testGetExternalLinkByPosition_overrun()
   {
      $this->object->getExternalLinkByPosition(0);
   }
   
   /**
    * @covers DataFlowDiagram::getExternalLinkByPosition
    * @expectedException BadFunctionCallException
    */
   public function testGetExternalLinkByPosition_negativeOverrun()
   {
      $this->object->getExternalLinkByPosition(-1);
   }

   /**
    * @covers DataFlowDiagram::getExternalLinkbyId
    */
   public function testGetExternalLinkbyId_smoke()
   {
      $aDF = new DataFlow;
      $this->object->addExternalLink($aDF);
      $this->assertEquals($aDF, $this->object->getExternalLinkById($aDF->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::getExternalLinkbyId
    */
   public function testGetExternalLinkbyId_biggerSmoke()
   {
      $aDF = new DataFlow;
      $this->object->addExternalLink($aDF);  
      for($i = 0; $i<10; $i++)
      {
         $annotherDF = new DataFlow;
         $this->object->addExternalLink($annotherDF);
      }
      $this->assertEquals($aDF, $this->object->getExternalLinkbyId($aDF->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::getExternalLinkbyId
    */
   public function testGetExternalLinkbyId_null()
   {
      $aDF = new DataFlow;
      $this->assertNull($this->object->getExternalLinkById($aDF->getId()));
   }

   /**
    * @covers DataFlowDiagram::getNumberOfElements
    */
   public function testGetNumberOfElements_empty()
   {
      $this->assertEquals(0, $this->object->getNumberOfElements());
   }
   
   /**
    * @covers DataFlowDiagram::getNumberOfElements
    */
   public function testGetNumberOfElements_smoke()
   {
      $process = new Process;
      $this->object->addElement($process);
      $this->assertEquals(1, $this->object->getNumberOfElements());
   }

   /**
    * @covers DataFlowDiagram::addElement
    */
   public function testAddElement_smoke()
   {
      $process = new Process;
      $dataStore = new DataStore;
      $externalInteractor = new ExternalInteractor;
      $multiprocess = new Multiprocess;
      $dataFlow =  new DataFlow;
      
      $this->object->addElement($process);
      $this->assertEquals(1, $this->object->getNumberOfElements());
      
      $this->object->addElement($dataStore);
      $this->assertEquals(2, $this->object->getNumberOfElements());
      
      $this->object->addElement($externalInteractor);
      $this->assertEquals(3, $this->object->getNumberOfElements());
      
      $this->object->addElement($multiprocess);
      $this->assertEquals(4, $this->object->getNumberOfElements());
      
      $this->object->addElement($dataFlow);
      $this->assertEquals(5, $this->object->getNumberOfElements());
      
      $this->assertEquals($process, $this->object->getElementById($process->getId()));
      $this->assertEquals($dataStore, $this->object->getElementById($dataStore->getId()));
      $this->assertEquals($externalInteractor, $this->object->getElementById($externalInteractor->getId()));
      $this->assertEquals($multiprocess, $this->object->getElementById($multiprocess->getId()));
      $this->assertEquals($dataFlow, $this->object->getElementById($dataFlow->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::addElement
    * @expectedException BadFunctionCallException
    */
   public function testAddElement_invalidInput()
   {
      $aDFD = new DataFlowDiagram;
      $this->object->addElement($aDFD);
   }

   /**
    * @covers DataFlowDiagram::removeElement
    */
   public function testRemoveElement_smokeOneElement()
   {
      $process = new Process;
      $this->object->addElement($process);
      $this->assertTrue($this->object->removeElement($process));
   }
   
   /**
    * @covers DataFlowDiagram::removeElement
    */
   public function testRemoveElement_linkClearing_nodeToDF()
   {
      $process = new Process;
      $dataFlow = new DataFlow;
      $dataFlow->setOriginNode($process);
      $this->object->addElement($process);
      $this->object->addElement($dataFlow);
      $this->assertTrue($this->object->removeElement($process));
      $this->assertNull($dataFlow->getOriginNode());
   }
   
   /**
    * @covers DataFlowDiagram::removeElement
    */
   public function testRemoveElement_linkClearing_DFToNode()
   {
      $process = new Process;
      $dataFlow = new DataFlow;
      $dataFlow->setOriginNode($process);
      $this->object->addElement($process);
      $this->object->addElement($dataFlow);
      $this->assertTrue($this->object->removeElement($dataFlow));
      $this->assertNull($process->getLinkbyId($dataFlow->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::removeElement
    */
   public function testRemoveElement_smokeAllClasses()
   {
      $process = new Process;
      $dataStore = new DataStore;
      $externalInteractor = new ExternalInteractor;
      $multiprocess = new Multiprocess;
      $dataFlow =  new DataFlow;
      
      $this->object->addElement($process);
      $this->assertEquals(1, $this->object->getNumberOfElements());
      
      $this->object->addElement($dataStore);
      $this->assertEquals(2, $this->object->getNumberOfElements());
      
      $this->object->addElement($externalInteractor);
      $this->assertEquals(3, $this->object->getNumberOfElements());
      
      $this->object->addElement($multiprocess);
      $this->assertEquals(4, $this->object->getNumberOfElements());
      
      $this->object->addElement($dataFlow);
      $this->assertEquals(5, $this->object->getNumberOfElements());
      
      $this->assertTrue($this->object->removeElement($process));
      $this->assertTrue($this->object->removeElement($dataStore));
      $this->assertTrue($this->object->removeElement($externalInteractor));
      $this->assertTrue($this->object->removeElement($multiprocess));
      $this->assertTrue($this->object->removeElement($dataFlow));
      
      $this->assertNull($this->object->getElementById($process->getId()));
      $this->assertNull($this->object->getElementById($dataStore->getId()));
      $this->assertNull($this->object->getElementById($externalInteractor->getId()));
      $this->assertNull($this->object->getElementById($multiprocess->getId()));
      $this->assertNull($this->object->getElementById($dataFlow->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::removeElement
    */
   public function testRemoveElement_empty()
   {
      $process = new Process;
      $this->assertFalse($this->object->removeElement($process));
   }
   
   /**
    * @covers DataFlowDiagram::removeElement
    * @expectedException BadFunctionCallException
    */
   public function testRemoveElement_invalidInput()
   {
      $notAElement = new DataFlowDiagram;
      $this->object->removeElement($notAElement);
   }

   /**
    * @covers DataFlowDiagram::getElementByPosition
    */
   public function testGetElementByPosition_smoke()
   {
      $process = new Process;
      $this->object->addElement($process);
      $this->assertEquals($process, $this->object->getElementByPosition(0));
   }
   
   /**
    * @covers DataFlowDiagram::getElementByPosition
    * @expectedException BadFunctionCallException
    */
   public function testGetElementByPosition_overrun()
   {
      $this->object->getElementByPosition(0);
   }
   
   /**
    * @covers DataFlowDiagram::getElementByPosition
    * @expectedException BadFunctionCallException
    */
   public function testGetElementByPosition_negativeInput()
   {
      $this->object->getElementByPosition(-1);
   }

   /**
    * @covers DataFlowDiagram::getElementById
    */
   public function testGetElementById_smoke()
   {
      $process = new Process;
      $this->object->addElement($process);
      $this->assertEquals($process, $this->object->getElementById($process->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::getElementById
    */
   public function testGetElementById_null()
   {
      $process = new Process;
      $this->assertNull($this->object->getElementById($process->getId()));
   }
   
   /**
    * @covers DataFlowDiagram::getElementById
    */
   public function testGetElementById_biggerSmoke()
   {
      $process = new Process;
      $this->object->addElement($process);
      for($i = 0; $i < 10; $i++)
      {
         $someProcess = new Process;
         $this->object->addElement($someProcess);
      }
      $this->assertEquals($process, $this->object->getElementById($process->getId()));
   }

}
