<?php
require_once "../../Request/SimpleRequest.php";
require_once "../../MethodsEnum.php";
require_once "../../Request/MethodException.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-11 at 17:30:58.
 */
class SimpleRequestTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var simpleRequest
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new SimpleRequest;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * Checks that the processHeader function successfully gets out the
     * accept header for a single media type
     * 
     * @covers simpleRequest::processHeader
     */
    public function testSingleMediaType()
    {
        $testType = "text/html";
        $resource = "/test.html";
        $accept = $testType;
        $method = "GET";
        $singleMedia = new SimpleRequest($accept, $method, $resource);
        $result = $singleMedia->getAccept();
        $this->assertEquals($testType, $result[0]);
    }
    /**
     * Checks that Request object correctly handles multiple types in the 
     * accept portion of the header
     * @covers Request::processHeader
     */
    public function testMultipleMediaType()
    {
        $testTypes = array("text/html", "text/xml", "text/json");
        $resource = "/test.html";
        $accept = implode(", ", $testTypes);
        $method = "GET";
        $multiMedia = new SimpleRequest($accept, $method, $resource);
        $result = $multiMedia->getAccept();
        
        // First ensure that the same number of results are returned
        // as there were inputs
        $this->assertEquals(count($result), count($testTypes));
        // Then check they match
        for ($i = 0; $i < count($result); $i++)
        {
            $this->assertEquals($testTypes[$i], $result[$i]);
        }
    }
    
    /**
     * @covers SimpleRequest::setMethod
     * @expectedException MethodException
     */
    public function testBadMethod()
    {
        $badMethod = "FAKE";
        $resource = "/test.html";
        $accept = "text/html";
        $this->object = new SimpleRequest($accept, $badMethod, $resource);
    }
    
    /**
     * Test all the different potential methods to ensure that when a string
     * with their name is passed in, they will return a string with the proper
     * integer equivalent (as per MethodsEnum)
     * @covers Request::__construct, Request::setMethod, Request::getMethod
     */
    public function testGoodMethods()
    {
        $resource = "dfd/uuid100";
        $accept = "text/json";
        
        // Test with GET
        $this->object = new SimpleRequest($accept, "GET", $resource);
        $this->assertEquals(MethodsEnum::GET, $this->object->getMethod());
        
        // Test with POST
        $this->object = new SimpleRequest($accept, "POST", $resource);
        $this->assertEquals(MethodsEnum::POST, $this->object->getMethod());
        
        // Test with PUT
        $this->object = new SimpleRequest($accept, "PUT", $resource);
        $this->assertEquals(MethodsEnum::PUT, $this->object->getMethod());
        
        // Test with DELETE
        $this->object = new SimpleRequest($accept, "DELETE", $resource);
        $this->assertEquals(MethodsEnum::DELETE, $this->object->getMethod());
        
        // Test with PATCH
        $this->object = new SimpleRequest($accept, "PATCH", $resource);
        $this->assertEquals(MethodsEnum::PATCH, $this->object->getMethod());
    }
    /**
     * @covers Request::__construct, Request::setResource, Request::getResource
     */
    public function testResource()
    {
        $resource = "dfd/uuid100";
        $accept = "text/json";
        $method = "GET";
        
        $this->object = new SimpleRequest($accept, $method, $resource);        
        $this->assertEquals($resource, $this->object->getResource());
    }
}
