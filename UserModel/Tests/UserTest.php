<?php
require_once "../User.php";
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-03 at 20:18:09.
 */
class UserTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var User
     */
    protected $user;

    /**
     * Initializes default object for use
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->user = new User("TestName", "TestOrganization");
    }

    /**
     * @covers User::__construct
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage Constructor requires a value for name and organization
     * Tests that a null user throws an InvalidArgumentException
     */
    public function testNullUserConstruct()
    {
        $user_tmp = new User("", "TestOrg");
    }
    
     /**
     * @covers User::__construct
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage Constructor requires a value for name and organization
     * Tests that a null organization throws an InvalidArgumentException
     */
    public function testNullOrgConstruct()
    {
        $user_tmp = new User("TestUser", "");
    }
    
    /**
     * @covers User::setName()
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage setName requires a value for name
     */
    public function testNullSetName()
    {
        $this->user->setName("");
    }
    
    /**
     * @covers User::setOrganization
     * @expectedException InvalidArgumentException
     * @expectedExceptionMessage setOrganization requires a value for organization
     */
    public function testNullSetOrganization()
    {
        $this->user->setOrganization("");
    }
    
    /**
     * @covers User::setName
     * Checks that new username can be set, and that when fetched
     * it matches the expected value.
     */
    public function testSetName()
    {
        $this->user->setName("TestAgain");
        $this->assertEquals($this->user->getName(), "TestAgain");
    }

    /**
     * @covers User::getName
     * Checks that the constructor initialized name matches what comes out
     * of getName
     */
    public function testGetName()
    {
        $this->assertEquals($this->user->getName(), "TestName");
    }

    /**
     * @covers User::getId
     * Checks that, upon generating a new object, the ID doesn't match the
     * original objects ID.
     */
    public function testGetId()
    {
        $user2 = new User("Test2", "TestOrg");
        $this->assertTrue($user2->getId() != $this->user->getId());
    }

    /**
     * @covers User::setOrganization
     * Tests that the setOrganization will set a new organization which can
     * then be retrieved
     */
    public function testSetOrganization()
    {
        $this->user->setOrganization("Test2Org");
        $this->assertEquals($this->user->getOrganization(), "Test2Org");
    }

    /**
     * @covers User::getOrganization
     * Tests that the getOrganization function retrieves the constructor set 
     * organization correctly
     */
    public function testGetOrganization()
    {
        $this->assertEquals($this->user->getOrganization(), "TestOrganization");
    }

    /**
     * @covers User::isAdmin
     * Makes sure that isAdmin returns false.
     */
    public function testIsAdmin()
    {
        $this->assertEquals($this->user->isAdmin(), FALSE);
    }

}
